{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\Metaverse\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\n// This is the main component of your React application, handling routing for different pages.\nimport React, { useState, useEffect } from 'react';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport GameCanvas from './pages/GameCanvas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentPage, setCurrentPage] = useState('login'); // State to manage current page view\n  const [token, setToken] = useState(localStorage.getItem('token')); // Get token from local storage\n\n  // Effect to check token and redirect to game if logged in\n  useEffect(() => {\n    if (token) {\n      setCurrentPage('game');\n    }\n  }, [token]);\n\n  // Function to handle successful login, storing token and navigating to game\n  const handleLoginSuccess = newToken => {\n    setToken(newToken);\n    localStorage.setItem('token', newToken); // Store token in local storage\n    setCurrentPage('game');\n  };\n\n  // Function to handle logout, clearing token and navigating to login\n  const handleLogout = () => {\n    setToken(null);\n    localStorage.removeItem('token');\n    setCurrentPage('login');\n  };\n\n  // Render different components based on currentPage state\n  let content;\n  switch (currentPage) {\n    case 'login':\n      content = /*#__PURE__*/_jsxDEV(LoginPage, {\n        onLoginSuccess: handleLoginSuccess,\n        onNavigateToRegister: () => setCurrentPage('register')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this);\n      break;\n    case 'register':\n      content = /*#__PURE__*/_jsxDEV(RegisterPage, {\n        onRegistrationSuccess: () => setCurrentPage('login'),\n        onNavigateToLogin: () => setCurrentPage('login')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this);\n      break;\n    case 'game':\n      content = /*#__PURE__*/_jsxDEV(GameCanvas, {\n        token: token,\n        onLogout: handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this);\n      break;\n    default:\n      content = /*#__PURE__*/_jsxDEV(LoginPage, {\n        onLoginSuccess: handleLoginSuccess,\n        onNavigateToRegister: () => setCurrentPage('register')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex items-center justify-center bg-gray-900 text-white\",\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"YgCagwPeU+x4OMOll0kZjh56Vvg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","LoginPage","RegisterPage","GameCanvas","jsxDEV","_jsxDEV","App","_s","currentPage","setCurrentPage","token","setToken","localStorage","getItem","handleLoginSuccess","newToken","setItem","handleLogout","removeItem","content","onLoginSuccess","onNavigateToRegister","fileName","_jsxFileName","lineNumber","columnNumber","onRegistrationSuccess","onNavigateToLogin","onLogout","className","children","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/Metaverse/frontend/src/App.js"],"sourcesContent":["\r\n// frontend/src/App.js\r\n// This is the main component of your React application, handling routing for different pages.\r\nimport React, { useState, useEffect } from 'react';\r\nimport LoginPage from './pages/LoginPage';\r\nimport RegisterPage from './pages/RegisterPage';\r\nimport GameCanvas from './pages/GameCanvas';\r\n\r\nfunction App() {\r\n  const [currentPage, setCurrentPage] = useState('login'); // State to manage current page view\r\n  const [token, setToken] = useState(localStorage.getItem('token')); // Get token from local storage\r\n\r\n  // Effect to check token and redirect to game if logged in\r\n  useEffect(() => {\r\n    if (token) {\r\n      setCurrentPage('game');\r\n    }\r\n  }, [token]);\r\n\r\n  // Function to handle successful login, storing token and navigating to game\r\n  const handleLoginSuccess = (newToken) => {\r\n    setToken(newToken);\r\n    localStorage.setItem('token', newToken); // Store token in local storage\r\n    setCurrentPage('game');\r\n  };\r\n\r\n  // Function to handle logout, clearing token and navigating to login\r\n  const handleLogout = () => {\r\n    setToken(null);\r\n    localStorage.removeItem('token');\r\n    setCurrentPage('login');\r\n  };\r\n\r\n  // Render different components based on currentPage state\r\n  let content;\r\n  switch (currentPage) {\r\n    case 'login':\r\n      content = <LoginPage onLoginSuccess={handleLoginSuccess} onNavigateToRegister={() => setCurrentPage('register')} />;\r\n      break;\r\n    case 'register':\r\n      content = <RegisterPage onRegistrationSuccess={() => setCurrentPage('login')} onNavigateToLogin={() => setCurrentPage('login')} />;\r\n      break;\r\n    case 'game':\r\n      content = <GameCanvas token={token} onLogout={handleLogout} />;\r\n      break;\r\n    default:\r\n      content = <LoginPage onLoginSuccess={handleLoginSuccess} onNavigateToRegister={() => setCurrentPage('register')} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-900 text-white\">\r\n      {content}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,UAAU,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EACzD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAACa,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEnE;EACAb,SAAS,CAAC,MAAM;IACd,IAAIU,KAAK,EAAE;MACTD,cAAc,CAAC,MAAM,CAAC;IACxB;EACF,CAAC,EAAE,CAACC,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMI,kBAAkB,GAAIC,QAAQ,IAAK;IACvCJ,QAAQ,CAACI,QAAQ,CAAC;IAClBH,YAAY,CAACI,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC,CAAC,CAAC;IACzCN,cAAc,CAAC,MAAM,CAAC;EACxB,CAAC;;EAED;EACA,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACzBN,QAAQ,CAAC,IAAI,CAAC;IACdC,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChCT,cAAc,CAAC,OAAO,CAAC;EACzB,CAAC;;EAED;EACA,IAAIU,OAAO;EACX,QAAQX,WAAW;IACjB,KAAK,OAAO;MACVW,OAAO,gBAAGd,OAAA,CAACJ,SAAS;QAACmB,cAAc,EAAEN,kBAAmB;QAACO,oBAAoB,EAAEA,CAAA,KAAMZ,cAAc,CAAC,UAAU;MAAE;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MACnH;IACF,KAAK,UAAU;MACbN,OAAO,gBAAGd,OAAA,CAACH,YAAY;QAACwB,qBAAqB,EAAEA,CAAA,KAAMjB,cAAc,CAAC,OAAO,CAAE;QAACkB,iBAAiB,EAAEA,CAAA,KAAMlB,cAAc,CAAC,OAAO;MAAE;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MAClI;IACF,KAAK,MAAM;MACTN,OAAO,gBAAGd,OAAA,CAACF,UAAU;QAACO,KAAK,EAAEA,KAAM;QAACkB,QAAQ,EAAEX;MAAa;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MAC9D;IACF;MACEN,OAAO,gBAAGd,OAAA,CAACJ,SAAS;QAACmB,cAAc,EAAEN,kBAAmB;QAACO,oBAAoB,EAAEA,CAAA,KAAMZ,cAAc,CAAC,UAAU;MAAE;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;EACvH;EAEA,oBACEpB,OAAA;IAAKwB,SAAS,EAAC,sEAAsE;IAAAC,QAAA,EAClFX;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAAClB,EAAA,CA9CQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}