{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\Metaverse\\\\frontend\\\\src\\\\pages\\\\GameCanvas.js\",\n  _s = $RefreshSig$();\n// frontend/src/pages/GameCanvas.js\n// This component connects to the WebSocket server and handles real-time player synchronization and chat.\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { io } from 'socket.io-client'; // Import socket.io-client\nimport ChatBox from '../components/ChatBox'; // Import ChatBox component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000'; // Make sure this matches your backend URL\n\nfunction GameCanvas({\n  token,\n  onLogout\n}) {\n  _s();\n  const mountRef = useRef(null); // Ref for the DOM element to mount the Three.js canvas\n  const playerRef = useRef(new THREE.Object3D()); // Ref for the local player's 3D object\n  const keysPressed = useRef({}); // Object to track currently pressed keys for movement\n  const otherPlayers = useRef({}); // Object to store other players' 3D objects by their socket ID\n  const socket = useRef(null); // Socket.IO client instance reference\n  const animationFrameId = useRef(null); // To store the requestAnimationFrame ID for cleanup\n\n  const [chatMessages, setChatMessages] = useState([]); // State to hold chat messages\n  const [username, setUsername] = useState('Guest'); // State for the current user's display name\n\n  // Effect to decode username from JWT token on component mount or token change\n  useEffect(() => {\n    if (token) {\n      try {\n        const decodedToken = JSON.parse(atob(token.split('.')[1]));\n        if (decodedToken && decodedToken.user && decodedToken.user.username) {\n          setUsername(decodedToken.user.username);\n        } else if (decodedToken && decodedToken.user && decodedToken.user.id) {\n          // Fallback to user ID if username is not directly in token\n          setUsername(`User_${decodedToken.user.id.substring(0, 6)}`);\n        }\n      } catch (e) {\n        console.error(\"Failed to decode token:\", e);\n      }\n    }\n  }, [token]);\n\n  // Main useEffect for Three.js setup and Socket.IO connections\n  useEffect(() => {\n    if (!mountRef.current) return; // Ensure the DOM element is mounted\n\n    // --- Three.js Scene Setup ---\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x222222); // Dark grey background\n\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 1.6, 5); // Position camera slightly above ground, looking forward\n\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement); // Add the renderer's canvas to the DOM\n\n    // Ground plane\n    const groundGeometry = new THREE.PlaneGeometry(100, 100);\n    const groundMaterial = new THREE.MeshLambertMaterial({\n      color: 0x444444,\n      side: THREE.DoubleSide\n    });\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = Math.PI / 2; // Rotate to be flat on the XZ plane\n    scene.add(ground);\n\n    // Player (self) avatar (a green cube)\n    const playerGeometry = new THREE.BoxGeometry(1, 1.8, 1); // Avatar-like dimensions\n    const playerMaterial = new THREE.MeshPhongMaterial({\n      color: 0x00ff00\n    }); // Bright green color\n    const playerMesh = new THREE.Mesh(playerGeometry, playerMaterial);\n    playerMesh.position.y = 0.9; // Half of height to sit on the ground\n    playerRef.current = playerMesh; // Assign the mesh to the player ref\n    scene.add(playerRef.current);\n\n    // Lighting for the scene\n    const ambientLight = new THREE.AmbientLight(0x404040); // Soft white ambient light\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8); // Brighter directional light\n    directionalLight.position.set(5, 10, 7); // Position the light source\n    scene.add(directionalLight);\n\n    // --- Socket.IO Setup ---\n    socket.current = io(BACKEND_URL); // Connect to the WebSocket server\n\n    socket.current.on('connect', () => {\n      console.log('Connected to WebSocket server:', socket.current.id);\n      // Emit username to backend once connected and username is resolved from token\n      if (username !== 'Guest') {\n        socket.current.emit('updateUsername', username);\n      }\n    });\n\n    // Listener for 'currentPlayers' event: receives data about all players currently in the game\n    socket.current.on('currentPlayers', players => {\n      for (const id in players) {\n        if (id === socket.current.id) continue; // Skip rendering self, as we already have playerRef for it\n\n        const player = players[id];\n        const otherPlayerGeometry = new THREE.BoxGeometry(1, 1.8, 1);\n        // Use the player's color received from the backend\n        const otherPlayerMaterial = new THREE.MeshPhongMaterial({\n          color: new THREE.Color(player.color)\n        });\n        const otherPlayerMesh = new THREE.Mesh(otherPlayerGeometry, otherPlayerMaterial);\n        otherPlayerMesh.position.set(player.position.x, player.position.y, player.position.z);\n        otherPlayerMesh.rotation.y = player.rotation.y;\n        otherPlayerMesh.name = `player-${id}`; // Assign a unique name for easy retrieval/removal\n        scene.add(otherPlayerMesh);\n        otherPlayers.current[id] = otherPlayerMesh; // Store the mesh in our ref\n        console.log(`Added existing player ${player.username} (${id})`);\n      }\n    });\n\n    // Listener for 'playerConnected' event: a new player has joined the game\n    socket.current.on('playerConnected', playerData => {\n      if (playerData.id === socket.current.id) return; // Ensure we don't add ourselves twice\n\n      const otherPlayerGeometry = new THREE.BoxGeometry(1, 1.8, 1);\n      const otherPlayerMaterial = new THREE.MeshPhongMaterial({\n        color: new THREE.Color(playerData.color)\n      });\n      const otherPlayerMesh = new THREE.Mesh(otherPlayerGeometry, otherPlayerMaterial);\n      otherPlayerMesh.position.set(playerData.position.x, playerData.position.y, playerData.position.z);\n      otherPlayerMesh.rotation.y = playerData.rotation.y;\n      otherPlayerMesh.name = `player-${playerData.id}`;\n      scene.add(otherPlayerMesh);\n      otherPlayers.current[playerData.id] = otherPlayerMesh;\n      console.log(`Player connected: ${playerData.username} (${playerData.id})`);\n    });\n\n    // Listener for 'playerMoved' event: an existing player has moved\n    socket.current.on('playerMoved', playerData => {\n      const playerMesh = otherPlayers.current[playerData.id];\n      if (playerMesh) {\n        // Update the position and rotation of the corresponding player's mesh\n        playerMesh.position.set(playerData.position.x, playerData.position.y, playerData.position.z);\n        playerMesh.rotation.y = playerData.rotation.y;\n      }\n    });\n\n    // Listener for 'playerDisconnected' event: a player has left the game\n    socket.current.on('playerDisconnected', playerId => {\n      const playerMesh = otherPlayers.current[playerId];\n      if (playerMesh) {\n        scene.remove(playerMesh); // Remove the 3D object from the scene\n        // Dispose of geometry and material to free up memory\n        if (playerMesh.geometry) playerMesh.geometry.dispose();\n        if (playerMesh.material) playerMesh.material.dispose();\n        delete otherPlayers.current[playerId]; // Remove from our tracking object\n        console.log(`Player disconnected: ${playerId}`);\n      }\n    });\n\n    // Listener for 'chatMessage' event: receives new chat messages\n    socket.current.on('chatMessage', messageData => {\n      setChatMessages(prevMessages => [...prevMessages, messageData]); // Add new message to state\n    });\n\n    // Listener for socket disconnection\n    socket.current.on('disconnect', () => {\n      console.log('Disconnected from WebSocket server');\n    });\n\n    // --- User Input Handling ---\n    const movementSpeed = 0.1;\n    const rotationSpeed = 0.05;\n    const onKeyDown = event => {\n      keysPressed.current[event.key.toLowerCase()] = true;\n    };\n    const onKeyUp = event => {\n      keysPressed.current[event.key.toLowerCase()] = false;\n    };\n    window.addEventListener('keydown', onKeyDown);\n    window.addEventListener('keyup', onKeyUp);\n\n    // --- Animation Loop (Game Loop) ---\n    const animate = () => {\n      animationFrameId.current = requestAnimationFrame(animate); // Request the next frame\n\n      let moved = false; // Flag to check if the local player has moved\n      // Store old position and rotation to check if an update is needed\n      const oldPosition = playerRef.current.position.clone();\n      const oldRotation = playerRef.current.rotation.y;\n\n      // Update player position/rotation based on keys pressed\n      if (keysPressed.current['w']) {\n        // Forward\n        playerRef.current.translateZ(-movementSpeed);\n        moved = true;\n      }\n      if (keysPressed.current['s']) {\n        // Backward\n        playerRef.current.translateZ(movementSpeed);\n        moved = true;\n      }\n      if (keysPressed.current['a']) {\n        // Strafe Left\n        playerRef.current.translateX(-movementSpeed);\n        moved = true;\n      }\n      if (keysPressed.current['d']) {\n        // Strafe Right\n        playerRef.current.translateX(movementSpeed);\n        moved = true;\n      }\n      if (keysPressed.current['q']) {\n        // Rotate Left\n        playerRef.current.rotation.y += rotationSpeed;\n        moved = true;\n      }\n      if (keysPressed.current['e']) {\n        // Rotate Right\n        playerRef.current.rotation.y -= rotationSpeed;\n        moved = true;\n      }\n\n      // If the local player moved or rotated, emit their new state to the server\n      if (moved) {\n        socket.current.emit('playerMovement', {\n          position: playerRef.current.position,\n          rotation: {\n            y: playerRef.current.rotation.y\n          }\n        });\n      }\n\n      // Make the camera follow the player in a third-person perspective\n      camera.position.x = playerRef.current.position.x;\n      camera.position.z = playerRef.current.position.z + 5; // Stay 5 units behind\n      camera.position.y = playerRef.current.position.y + 3; // Stay 3 units above\n      camera.lookAt(playerRef.current.position); // Make camera look at the player\n\n      renderer.render(scene, camera); // Render the scene for the current frame\n    };\n    animate(); // Start the animation loop\n\n    // Handle window resizing\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // --- Cleanup Function ---\n    // This runs when the component unmounts to prevent memory leaks and stop processes.\n    return () => {\n      cancelAnimationFrame(animationFrameId.current); // Stop the animation loop\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('keydown', onKeyDown);\n      window.removeEventListener('keyup', onKeyUp);\n\n      // Remove the renderer's canvas from the DOM\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      // Dispose of Three.js resources\n      renderer.dispose();\n      groundGeometry.dispose();\n      groundMaterial.dispose();\n      playerGeometry.dispose();\n      playerMaterial.dispose();\n      scene.remove(playerRef.current);\n\n      // Clean up other players' meshes\n      for (const id in otherPlayers.current) {\n        const mesh = otherPlayers.current[id];\n        if (mesh) {\n          scene.remove(mesh);\n          if (mesh.geometry) mesh.geometry.dispose();\n          if (mesh.material) mesh.material.dispose();\n        }\n      }\n      otherPlayers.current = {}; // Clear the ref\n\n      // Disconnect the Socket.IO client\n      if (socket.current) {\n        socket.current.disconnect();\n      }\n    };\n  }, [username]); // The effect reruns if `username` changes to update socket with the correct username\n\n  // Function to send chat messages from the ChatBox component\n  const sendChatMessage = message => {\n    if (socket.current && socket.current.connected && message.trim()) {\n      // Emit 'chatMessage' event with sender's username and the message content\n      socket.current.emit('chatMessage', {\n        sender: username,\n        message: message.trim()\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative w-full h-screen overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      className: \"absolute inset-0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-4 right-4 bg-gray-800 p-3 rounded-lg shadow-md flex items-center space-x-2 z-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-sm font-medium text-gray-300\",\n        children: [\"Welcome, \", username, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onLogout,\n        className: \"bg-red-600 hover:bg-red-700 text-white text-sm font-bold py-1 px-3 rounded-md transition duration-300 ease-in-out\",\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute bottom-4 left-1/2 -translate-x-1/2 bg-gray-800 p-4 rounded-xl shadow-lg w-11/12 max-w-xl flex flex-col items-center z-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-semibold mb-2 text-blue-400\",\n        children: \"Welcome to your Metaverse!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-400 text-center\",\n        children: \"Use **W, A, S, D** for movement and **Q, E** for rotation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatBox, {\n      messages: chatMessages,\n      onSendMessage: sendChatMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n}\n_s(GameCanvas, \"RRfGgzlgKhuVM/LYFDWRKQaCVfQ=\");\n_c = GameCanvas;\nexport default GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","io","ChatBox","jsxDEV","_jsxDEV","BACKEND_URL","process","env","REACT_APP_BACKEND_URL","GameCanvas","token","onLogout","_s","mountRef","playerRef","Object3D","keysPressed","otherPlayers","socket","animationFrameId","chatMessages","setChatMessages","username","setUsername","decodedToken","JSON","parse","atob","split","user","id","substring","e","console","error","current","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","groundGeometry","PlaneGeometry","groundMaterial","MeshLambertMaterial","color","side","DoubleSide","ground","Mesh","rotation","x","Math","PI","add","playerGeometry","BoxGeometry","playerMaterial","MeshPhongMaterial","playerMesh","y","ambientLight","AmbientLight","directionalLight","DirectionalLight","on","log","emit","players","player","otherPlayerGeometry","otherPlayerMaterial","otherPlayerMesh","z","name","playerData","playerId","remove","geometry","dispose","material","messageData","prevMessages","movementSpeed","rotationSpeed","onKeyDown","event","key","toLowerCase","onKeyUp","addEventListener","animate","requestAnimationFrame","moved","oldPosition","clone","oldRotation","translateZ","translateX","lookAt","render","onWindowResize","aspect","updateProjectionMatrix","cancelAnimationFrame","removeEventListener","removeChild","mesh","disconnect","sendChatMessage","message","connected","trim","sender","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","messages","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/Metaverse/frontend/src/pages/GameCanvas.js"],"sourcesContent":["// frontend/src/pages/GameCanvas.js\r\n// This component connects to the WebSocket server and handles real-time player synchronization and chat.\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { io } from 'socket.io-client'; // Import socket.io-client\r\nimport ChatBox from '../components/ChatBox'; // Import ChatBox component\r\n\r\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000'; // Make sure this matches your backend URL\r\n\r\nfunction GameCanvas({ token, onLogout }) {\r\n  const mountRef = useRef(null); // Ref for the DOM element to mount the Three.js canvas\r\n  const playerRef = useRef(new THREE.Object3D()); // Ref for the local player's 3D object\r\n  const keysPressed = useRef({}); // Object to track currently pressed keys for movement\r\n  const otherPlayers = useRef({}); // Object to store other players' 3D objects by their socket ID\r\n  const socket = useRef(null); // Socket.IO client instance reference\r\n  const animationFrameId = useRef(null); // To store the requestAnimationFrame ID for cleanup\r\n\r\n  const [chatMessages, setChatMessages] = useState([]); // State to hold chat messages\r\n  const [username, setUsername] = useState('Guest'); // State for the current user's display name\r\n\r\n  // Effect to decode username from JWT token on component mount or token change\r\n  useEffect(() => {\r\n    if (token) {\r\n      try {\r\n        const decodedToken = JSON.parse(atob(token.split('.')[1]));\r\n        if (decodedToken && decodedToken.user && decodedToken.user.username) {\r\n          setUsername(decodedToken.user.username);\r\n        } else if (decodedToken && decodedToken.user && decodedToken.user.id) {\r\n            // Fallback to user ID if username is not directly in token\r\n            setUsername(`User_${decodedToken.user.id.substring(0, 6)}`);\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Failed to decode token:\", e);\r\n      }\r\n    }\r\n  }, [token]);\r\n\r\n\r\n  // Main useEffect for Three.js setup and Socket.IO connections\r\n  useEffect(() => {\r\n    if (!mountRef.current) return; // Ensure the DOM element is mounted\r\n\r\n    // --- Three.js Scene Setup ---\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x222222); // Dark grey background\r\n\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    camera.position.set(0, 1.6, 5); // Position camera slightly above ground, looking forward\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    mountRef.current.appendChild(renderer.domElement); // Add the renderer's canvas to the DOM\r\n\r\n    // Ground plane\r\n    const groundGeometry = new THREE.PlaneGeometry(100, 100);\r\n    const groundMaterial = new THREE.MeshLambertMaterial({ color: 0x444444, side: THREE.DoubleSide });\r\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n    ground.rotation.x = Math.PI / 2; // Rotate to be flat on the XZ plane\r\n    scene.add(ground);\r\n\r\n    // Player (self) avatar (a green cube)\r\n    const playerGeometry = new THREE.BoxGeometry(1, 1.8, 1); // Avatar-like dimensions\r\n    const playerMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00 }); // Bright green color\r\n    const playerMesh = new THREE.Mesh(playerGeometry, playerMaterial);\r\n    playerMesh.position.y = 0.9; // Half of height to sit on the ground\r\n    playerRef.current = playerMesh; // Assign the mesh to the player ref\r\n    scene.add(playerRef.current);\r\n\r\n    // Lighting for the scene\r\n    const ambientLight = new THREE.AmbientLight(0x404040); // Soft white ambient light\r\n    scene.add(ambientLight);\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8); // Brighter directional light\r\n    directionalLight.position.set(5, 10, 7); // Position the light source\r\n    scene.add(directionalLight);\r\n\r\n    // --- Socket.IO Setup ---\r\n    socket.current = io(BACKEND_URL); // Connect to the WebSocket server\r\n\r\n    socket.current.on('connect', () => {\r\n      console.log('Connected to WebSocket server:', socket.current.id);\r\n      // Emit username to backend once connected and username is resolved from token\r\n      if (username !== 'Guest') {\r\n        socket.current.emit('updateUsername', username);\r\n      }\r\n    });\r\n\r\n    // Listener for 'currentPlayers' event: receives data about all players currently in the game\r\n    socket.current.on('currentPlayers', (players) => {\r\n      for (const id in players) {\r\n        if (id === socket.current.id) continue; // Skip rendering self, as we already have playerRef for it\r\n\r\n        const player = players[id];\r\n        const otherPlayerGeometry = new THREE.BoxGeometry(1, 1.8, 1);\r\n        // Use the player's color received from the backend\r\n        const otherPlayerMaterial = new THREE.MeshPhongMaterial({ color: new THREE.Color(player.color) });\r\n        const otherPlayerMesh = new THREE.Mesh(otherPlayerGeometry, otherPlayerMaterial);\r\n        otherPlayerMesh.position.set(player.position.x, player.position.y, player.position.z);\r\n        otherPlayerMesh.rotation.y = player.rotation.y;\r\n        otherPlayerMesh.name = `player-${id}`; // Assign a unique name for easy retrieval/removal\r\n        scene.add(otherPlayerMesh);\r\n        otherPlayers.current[id] = otherPlayerMesh; // Store the mesh in our ref\r\n        console.log(`Added existing player ${player.username} (${id})`);\r\n      }\r\n    });\r\n\r\n    // Listener for 'playerConnected' event: a new player has joined the game\r\n    socket.current.on('playerConnected', (playerData) => {\r\n      if (playerData.id === socket.current.id) return; // Ensure we don't add ourselves twice\r\n\r\n      const otherPlayerGeometry = new THREE.BoxGeometry(1, 1.8, 1);\r\n      const otherPlayerMaterial = new THREE.MeshPhongMaterial({ color: new THREE.Color(playerData.color) });\r\n      const otherPlayerMesh = new THREE.Mesh(otherPlayerGeometry, otherPlayerMaterial);\r\n      otherPlayerMesh.position.set(playerData.position.x, playerData.position.y, playerData.position.z);\r\n      otherPlayerMesh.rotation.y = playerData.rotation.y;\r\n      otherPlayerMesh.name = `player-${playerData.id}`;\r\n      scene.add(otherPlayerMesh);\r\n      otherPlayers.current[playerData.id] = otherPlayerMesh;\r\n      console.log(`Player connected: ${playerData.username} (${playerData.id})`);\r\n    });\r\n\r\n    // Listener for 'playerMoved' event: an existing player has moved\r\n    socket.current.on('playerMoved', (playerData) => {\r\n      const playerMesh = otherPlayers.current[playerData.id];\r\n      if (playerMesh) {\r\n        // Update the position and rotation of the corresponding player's mesh\r\n        playerMesh.position.set(playerData.position.x, playerData.position.y, playerData.position.z);\r\n        playerMesh.rotation.y = playerData.rotation.y;\r\n      }\r\n    });\r\n\r\n    // Listener for 'playerDisconnected' event: a player has left the game\r\n    socket.current.on('playerDisconnected', (playerId) => {\r\n      const playerMesh = otherPlayers.current[playerId];\r\n      if (playerMesh) {\r\n        scene.remove(playerMesh); // Remove the 3D object from the scene\r\n        // Dispose of geometry and material to free up memory\r\n        if (playerMesh.geometry) playerMesh.geometry.dispose();\r\n        if (playerMesh.material) playerMesh.material.dispose();\r\n        delete otherPlayers.current[playerId]; // Remove from our tracking object\r\n        console.log(`Player disconnected: ${playerId}`);\r\n      }\r\n    });\r\n\r\n    // Listener for 'chatMessage' event: receives new chat messages\r\n    socket.current.on('chatMessage', (messageData) => {\r\n      setChatMessages((prevMessages) => [...prevMessages, messageData]); // Add new message to state\r\n    });\r\n\r\n    // Listener for socket disconnection\r\n    socket.current.on('disconnect', () => {\r\n      console.log('Disconnected from WebSocket server');\r\n    });\r\n\r\n    // --- User Input Handling ---\r\n    const movementSpeed = 0.1;\r\n    const rotationSpeed = 0.05;\r\n\r\n    const onKeyDown = (event) => {\r\n      keysPressed.current[event.key.toLowerCase()] = true;\r\n    };\r\n\r\n    const onKeyUp = (event) => {\r\n      keysPressed.current[event.key.toLowerCase()] = false;\r\n    };\r\n\r\n    window.addEventListener('keydown', onKeyDown);\r\n    window.addEventListener('keyup', onKeyUp);\r\n\r\n    // --- Animation Loop (Game Loop) ---\r\n    const animate = () => {\r\n      animationFrameId.current = requestAnimationFrame(animate); // Request the next frame\r\n\r\n      let moved = false; // Flag to check if the local player has moved\r\n      // Store old position and rotation to check if an update is needed\r\n      const oldPosition = playerRef.current.position.clone();\r\n      const oldRotation = playerRef.current.rotation.y;\r\n\r\n      // Update player position/rotation based on keys pressed\r\n      if (keysPressed.current['w']) { // Forward\r\n        playerRef.current.translateZ(-movementSpeed);\r\n        moved = true;\r\n      }\r\n      if (keysPressed.current['s']) { // Backward\r\n        playerRef.current.translateZ(movementSpeed);\r\n        moved = true;\r\n      }\r\n      if (keysPressed.current['a']) { // Strafe Left\r\n        playerRef.current.translateX(-movementSpeed);\r\n        moved = true;\r\n      }\r\n      if (keysPressed.current['d']) { // Strafe Right\r\n        playerRef.current.translateX(movementSpeed);\r\n        moved = true;\r\n      }\r\n      if (keysPressed.current['q']) { // Rotate Left\r\n        playerRef.current.rotation.y += rotationSpeed;\r\n        moved = true;\r\n      }\r\n      if (keysPressed.current['e']) { // Rotate Right\r\n        playerRef.current.rotation.y -= rotationSpeed;\r\n        moved = true;\r\n      }\r\n\r\n      // If the local player moved or rotated, emit their new state to the server\r\n      if (moved) {\r\n        socket.current.emit('playerMovement', {\r\n          position: playerRef.current.position,\r\n          rotation: { y: playerRef.current.rotation.y }\r\n        });\r\n      }\r\n\r\n      // Make the camera follow the player in a third-person perspective\r\n      camera.position.x = playerRef.current.position.x;\r\n      camera.position.z = playerRef.current.position.z + 5; // Stay 5 units behind\r\n      camera.position.y = playerRef.current.position.y + 3; // Stay 3 units above\r\n      camera.lookAt(playerRef.current.position); // Make camera look at the player\r\n\r\n      renderer.render(scene, camera); // Render the scene for the current frame\r\n    };\r\n\r\n    animate(); // Start the animation loop\r\n\r\n    // Handle window resizing\r\n    const onWindowResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', onWindowResize);\r\n\r\n    // --- Cleanup Function ---\r\n    // This runs when the component unmounts to prevent memory leaks and stop processes.\r\n    return () => {\r\n      cancelAnimationFrame(animationFrameId.current); // Stop the animation loop\r\n      window.removeEventListener('resize', onWindowResize);\r\n      window.removeEventListener('keydown', onKeyDown);\r\n      window.removeEventListener('keyup', onKeyUp);\r\n\r\n      // Remove the renderer's canvas from the DOM\r\n      if (mountRef.current && renderer.domElement) {\r\n        mountRef.current.removeChild(renderer.domElement);\r\n      }\r\n      // Dispose of Three.js resources\r\n      renderer.dispose();\r\n      groundGeometry.dispose();\r\n      groundMaterial.dispose();\r\n      playerGeometry.dispose();\r\n      playerMaterial.dispose();\r\n      scene.remove(playerRef.current);\r\n\r\n      // Clean up other players' meshes\r\n      for (const id in otherPlayers.current) {\r\n        const mesh = otherPlayers.current[id];\r\n        if (mesh) {\r\n          scene.remove(mesh);\r\n          if (mesh.geometry) mesh.geometry.dispose();\r\n          if (mesh.material) mesh.material.dispose();\r\n        }\r\n      }\r\n      otherPlayers.current = {}; // Clear the ref\r\n\r\n      // Disconnect the Socket.IO client\r\n      if (socket.current) {\r\n        socket.current.disconnect();\r\n      }\r\n    };\r\n  }, [username]); // The effect reruns if `username` changes to update socket with the correct username\r\n\r\n  // Function to send chat messages from the ChatBox component\r\n  const sendChatMessage = (message) => {\r\n    if (socket.current && socket.current.connected && message.trim()) {\r\n      // Emit 'chatMessage' event with sender's username and the message content\r\n      socket.current.emit('chatMessage', { sender: username, message: message.trim() });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative w-full h-screen overflow-hidden\">\r\n      <div ref={mountRef} className=\"absolute inset-0\"></div> {/* Three.js canvas will render here */}\r\n\r\n      {/* Top-right UI for user info and logout */}\r\n      <div className=\"absolute top-4 right-4 bg-gray-800 p-3 rounded-lg shadow-md flex items-center space-x-2 z-10\">\r\n        <span className=\"text-sm font-medium text-gray-300\">Welcome, {username}!</span>\r\n        <button\r\n          onClick={onLogout}\r\n          className=\"bg-red-600 hover:bg-red-700 text-white text-sm font-bold py-1 px-3 rounded-md transition duration-300 ease-in-out\"\r\n        >\r\n          Logout\r\n        </button>\r\n      </div>\r\n\r\n      {/* Bottom-center info overlay */}\r\n      <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 bg-gray-800 p-4 rounded-xl shadow-lg w-11/12 max-w-xl flex flex-col items-center z-10\">\r\n        <h3 className=\"text-xl font-semibold mb-2 text-blue-400\">Welcome to your Metaverse!</h3>\r\n        <p className=\"text-sm text-gray-400 text-center\">\r\n          Use **W, A, S, D** for movement and **Q, E** for rotation.\r\n        </p>\r\n      </div>\r\n\r\n      {/* ChatBox Component - handles chat display and input */}\r\n      <ChatBox messages={chatMessages} onSendMessage={sendChatMessage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}